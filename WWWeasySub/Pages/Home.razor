@page "/"
@using MudBlazor
@using System.Text.Json
@using System.Globalization
@using WMBlazorSlickCarousel.WMBSC
@using WWWeasySub.Interfaces
@using WWWeasySub.Layout
@using WWWeasySub.Models
@inject NavigationManager Nav
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject HttpClient Http
@inject ILocalizationService Localization
@inject ICurrencyService CurrencyService
@inject NavigationManager Nav
@inject IJSRuntime JS

<PageTitle>@Localize["Home"]</PageTitle>
<div class="container" style="place-content: space-evenly;">
	<div class="row">
		<div class="col-12 col-md-6 mb-4 px-3 pb-5">
			<div class="home-display display-flex-left home-display-detail">
				<div style="position: relative;">
					<img src="/images/group-30.svg" style="position: absolute; top: 0; left: 0; max-width: 100%; height: auto; opacity: 0.5;">
				</div>
				<img src="/images/get-revenue0.png" style="margin-right: 10px;">
				@Localize["PayLessEnjoyMore"]
			</div>
			<div class="home-display" style="margin: 40px 0px 35px 0px;">
				<span class="home-title">Vos abonnements et logiciels aux</span>
				<span class="home-title-gradient">meilleurs</span>
				<span class="home-title">prix<br /></span>
			</div>
			<div>
				<div class="home-title">
				</div>
				<div class="home-display home-display-details home-subtext display-flex-left" style="  text-align: left; align-self: stretch;">
					<span>
						<span class="text-white text-regular">Accédez</span>
						<span class="text-purple text-regular">facilement</span>
						<span class="text-white text-regular">à vos services préférés à prix</span>
						<span class="text-purple text-regular">réduits</span>
						<span class="text-white text-regular">grâce a</span>
						<span class="text-purple text-regular">SavePass</span>
						<span class="text-white text-regular">!</span>
					</span>
				</div>
				@* 			<div class="home-display" style="margin: 20px 0px 20px 0px;">
				<div class="frame-crypto">
					<span class="crypto-text">@Localize["WeAcceptCryptos"]</span>
					<img class="img-crypto" src="/images/cry1.png" />
					<img class="img-crypto" src="/images/cry2.png" />
					<img class="img-crypto" src="/images/cry3.png" />
					<img class="img-crypto" src="/images/cry4.png" />
				</div>
			</div> *@
			</div>
		</div>
		<div class="center-line"></div>
		<div class="row" style="place-items: center;">
			<div class="col-12">
				<span class="section-title">@Localize["Trends"]</span>
			</div>
			<div class="col-12">
				<BrandCarousel Category="Tendances" Title="Les Tendances" />
			</div>
		</div>
		<div class="row" style="place-items: center;">
			<span class="section-title">@Localize["Audio"]</span>
			<div>
				<BrandCarousel Category="Audio" Title="Audio" />
			</div>
		</div>
		<div class="row" style="place-items: center;">
			<div class="col-12">
				<span class="section-title">@Localize["VOD"]</span>
			</div>
			<div class="col-12">
				<BrandCarousel Category="VOD" Title="VOD" />
			</div>
		</div>
		<div class="row" style="place-items: center;">
			<div class="col-12">
				<span class="section-title">@Localize["Gaming"]</span>
			</div>
			<div class="col-12">
				<BrandCarousel Category="Gaming" Title="Gaming" />
			</div>
		</div>
	</div>
</div>
@code {

	void GoToSubscription()
	{
		Nav.NavigateTo("/subscription/netflix");
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var response = await Http.GetStringAsync("https://ipapi.co/json/");
			var geo = JsonSerializer.Deserialize<GeoInfo>(response, new JsonSerializerOptions
				{
					PropertyNameCaseInsensitive = true
				});
			if (geo is not null)
			{
				var regionCode = geo.Region_Code?.ToUpper() ?? "";
				var countryCode = geo.Country_Code ?? "US";
				var currency = geo.Currency ?? "USD";

				// Langue principale
				var mainLang = regionCode switch
				{
					"WAL" => "fr",
					"VLG" => "nl",
					"BRU" => "fr", // ou "nl" selon préférence
					_ => "en"
				};

				var cultureCode = (mainLang, countryCode) switch
				{
					("fr", _) => "fr-FR",
					("nl", "BE") => "nl-BE",
					("de", "DE") => "de-DE",
					("en", "BE") => "en-US",
					("en", _) => "en-US",
					_ => "en-US"
				};

				// Vérifie s’il y a déjà une culture choisie
				var cultureInStorage = await JS.InvokeAsync<string>("blazorCulture.get");

				// if (string.IsNullOrWhiteSpace(cultureInStorage))
				// {
				// 	// Appliquer et enregistrer la culture
				// 	Localization.SetCulture(cultureCode);
				// 	await JS.InvokeVoidAsync("blazorCulture.set", cultureCode);

				// 	// Optionnel : forcer le reload avec la nouvelle culture
				// 	Nav.NavigateTo(Nav.Uri, forceLoad: true);
				// 	return; // On sort ici car tout va recharger
				// }
				// else
				// {
				// 	// Appliquer la culture mémorisée pour le reste du composant
				// 	Localization.SetCulture(cultureInStorage);
				// }
				Localization.SetCulture(cultureInStorage);

				// Appliquer manuellement si tu veux l'utiliser localement
				// Localization.SetCulture(cultureCode);
				// await JS.InvokeVoidAsync("blazorCulture.set", cultureCode);

				Localization.CurrencySymbol = currency switch
				{
					"EUR" => "€",
					"USD" => "$",
					"GBP" => "£",
					_ => currency
				};

				var selectedCurrency = CurrencyService.AvailableCurrencies
					.FirstOrDefault(a => a.Code.ToUpper() == geo?.Currency?.ToUpper());

				if (selectedCurrency != null)
				{
					CurrencyService.SelectedCurrency = selectedCurrency;
				}

				StateHasChanged();
			}
		}
		catch
		{
			Localization.SetCulture("en-US");
			Localization.CurrencySymbol = "$";
		}
	}
}