@page "/subscription/{paramBrandName}"
@using System.ComponentModel.DataAnnotations
@using Microsoft.JSInterop
@using System.Net.Http.Json
@using System.Globalization
@using WWWeasySub.Interfaces
@using WWWeasySub.Models
@inject ISubscriptionPlanService PlanService
@inject IBrandService BrandService
@inject ISubscriptionPlanService SubscriptionPlanService
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject HttpClient Http
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject ICurrencyService CurrencyService
@implements IDisposable
@using MudBlazor
@inject IDialogService DialogService
@using WWWeasySub.Shared
@inject IPromoCodeService PromoService

@if (Plans is null || SelectedPlan is null)
{

}
else
{
	<div class="container" style="place-content: space-evenly;">
		<div class="row">
			<div class="col-12 col-md-6 mb-4" style="border-radius: 20px;background-color: #2b1f38;">
				<div class="row" style="place-self:center">
					<span class="payment-card-title">@BrandName</span>
				</div>
				<div class="center-line"></div>

				<div class="row" style="place-content: center;">
					@{
						var imageSrc = SelectedPlan?.Brand.ImageData != null && SelectedPlan.Brand.ImageData.Length > 0
						? $"data:image/png;base64,{Convert.ToBase64String(SelectedPlan.Brand.ImageData)}"
						: "/logos/tabii.png"; // <- mets ici ton image par défaut
					}
					<img class="img-fluid" src="@imageSrc" style="width: 277px;height: 277px; background-color:white" alt="@SelectedPlan?.Brand.Name ?? ''" />
				</div>
				<div class="row" style="display: flex;place-content: space-between;
    justify-content: center;    margin-top: 40px;
    place-content: center;">
					@if (Plans.Exists(a => a.DurationMonths == 12 && SelectedPlan?.SubscriptionTypeId == a.SubscriptionTypeId))
					{
						<div class="col-4 sub-card @(selectedDuration == 12 ? "selected" : "")" @onclick="@(() => SelectPlan(12))">
							<div style="place-self: center; margin: 10px 0px 10px 0px;">
								<span class="sub-length">12 @Localize["months"]</span>
							</div>
							<div style="place-self: center;
    margin: 10px 0px 10px 0px;">
								@if (SelectedPlan != null && Plans != null)
								{
									<span class="sub-price">@CurrencyService.Format(@Plans.FirstOrDefault(a => a.DurationMonths == 12 && SelectedPlan?.SubscriptionTypeId == a.SubscriptionTypeId).Price)</span>
								}
							</div>
							<div style="place-self: center;
    margin: 10px 0px 10px 0px;">
								<span class="sub-price-by-month">@CurrencyService.Format(@GetMonthlyPrice(12))</span>
								<span class="sub-price-by-month" style="color:black"> / @Localize["months"]</span>
							</div>
							@* 						<div style="place-self: center;
    margin: 10px 0px 10px 0px;">
							<span style="color: #000000; text-align: center; font-family: 'Inter-Medium', sans-serif;
						  font-size: 10px;
						  letter-spacing: 0.02em;
						  font-weight: 500;">@Localize["YouSave"]</span>
						</div> *@
							<div style="place-self: center;
    margin: 10px 0px 10px 0px;">
								<button class="select-sub" id="btn-subcard">
									<span style="color: #ffffff;
    font-family: 'Inter-Medium', sans-serif;
						font-size: 8px;
						letter-spacing: 0.02em;
							  font-weight: 500;">@Localize["Select"]</span>
								</button>
							</div>
						</div>
					}
					@if (Plans.Exists(a => a.DurationMonths == 3 && SelectedPlan?.SubscriptionTypeId == a.SubscriptionTypeId))
					{
						<div class="col-4 sub-card @(selectedDuration == 3 ? "selected" : "")" @onclick="@(() => SelectPlan(3))">
							<div style="place-self: center; margin: 10px 0px 10px 0px;">
								<span class="sub-length">3 @Localize["months"]</span>
							</div>
							<div style="place-self: center;
    margin: 10px 0px 10px 0px;">
								@if (SelectedPlan != null && Plans != null)
								{
									<span class="sub-price">@CurrencyService.Format(@Plans.FirstOrDefault(a => a.DurationMonths == 3 && SelectedPlan?.SubscriptionTypeId == a.SubscriptionTypeId).Price) </span>
								}
							</div>
							<div style="place-self: center;
    margin: 10px 0px 10px 0px;">
								<span class="sub-price-by-month">@CurrencyService.Format(@GetMonthlyPrice(3))</span>
								<span class="sub-price-by-month" style="color:black"> / @Localize["months"]</span>
							</div>
							@* 						<div style="place-self: center;
    margin: 10px 0px 10px 0px;">
							<span style="color: #000000; text-align: center; font-family: 'Inter-Medium', sans-serif;
						  font-size: 10px;
						  letter-spacing: 0.02em;
						  font-weight: 500;">@Localize["YouSave"]</span>
						</div> *@
							<div style="place-self: center;
    margin: 10px 0px 10px 0px;">
								<button class="select-sub" id="btn-subcard">
									<span style="color: #ffffff;
    font-family: 'Inter-Medium', sans-serif;
						font-size: 8px;
						letter-spacing: 0.02em;
						font-weight: 500;">@Localize["Select"]</span>
								</button>
							</div>
						</div>
					}
					@if (Plans.Exists(a => a.DurationMonths == 1 && SelectedPlan?.SubscriptionTypeId == a.SubscriptionTypeId))
					{
						<div class="col-4 sub-card @(selectedDuration == 1 ? "selected" : "")" @onclick="@(() => SelectPlan(1))">
							<div style="place-self: center; margin: 10px 0px 10px 0px;">
								<span class="sub-length">1 @Localize["month"]</span>
							</div>
							<div style="place-self: center;
    margin: 10px 0px 10px 0px;">
								@if (SelectedPlan != null && Plans != null)
								{
									<span class="sub-price">@CurrencyService.Format(@Plans.FirstOrDefault(a => a.DurationMonths == 1 && SelectedPlan?.SubscriptionTypeId == a.SubscriptionTypeId).Price)</span>
								}
							</div>
							<div style="place-self: center;
    margin: 10px 0px 10px 0px;">
								<span class="sub-price-by-month">@CurrencyService.Format(@GetMonthlyPrice(1))</span>
								<span class="sub-price-by-month" style="color:black"> / @Localize["months"]</span>
							</div>
							@* 						<div style="place-self: center;
    margin: 10px 0px 10px 0px;">
							<span style="color: #000000; text-align: center; font-family: 'Inter-Medium', sans-serif;
						  font-size: 10px;
						  letter-spacing: 0.02em;
						  font-weight: 500;">@Localize["YouSave"]</span>
						</div> *@
							<div style="place-self: center;
    margin: 10px 0px 10px 0px;">
								<button class="select-sub" id="btn-subcard">
									<span style="color: #ffffff;
    font-family: 'Inter-Medium', sans-serif;
						font-size: 8px;
						letter-spacing: 0.02em;
							  font-weight: 500;">@Localize["Select"]</span>
								</button>
							</div>
						</div>
					}
				</div>
			</div>
			<div class="col-12 col-md-6" style="border-radius: 20px;background-color: #2b1f38;display: flow;">
				<div class="row" style="place-self:center;     margin-bottom: 25px;">
					<span class="payment-card-title" style="display:initial;">@Localize["Payment"]</span>
					<div class="center-line"></div>
				</div>
				<div class="row" style="font-family: ' Inter-Bold', sans-serif;font-size: 28px;line-height: 73px;width: 100%;display: grid;place-content: center;height: 50%;">
					<div>
						<div class="row">
							<span class="payment-card-title">@selectedDuration @Localize["months"] </span>
						</div>
						@if (SelectedPlan != null && Plans != null)
						{
							<MudSelect @bind-Value="SelectedPlan" Label="@Localize["SelectAPlan"]" AdornmentColor="Color.Primary"
									   Variant="Variant.Text" InputClass="select-plan" style="-webkit-text-fill-color: white;">
								@foreach (var type in Plans.Where(a => a.DurationMonths == SelectedPlan.DurationMonths && SelectedPlan.BrandId == a.BrandId))
								{
									<MudSelectItem class="payment-card-title" Value="@type">@type.SubscriptionType.Name</MudSelectItem>
								}
							</MudSelect>
						}
					</div>

					<div class="row" style="display:flex;    place-content: center;">
						@if (SelectedPlan != null && Plans != null)
						{
							<span class="selling-price">@CurrencyService.Format(@SelectedPlan.Price)</span>
						}
						<div style="justify-items: center;">
							<MudTextField Label="Code promo" Style="color: white;"
										  InputClass="custom-placeholder" @bind-Value="promoCode" Disabled="promoApplied" />
						</div>
						<div class="row">
							<MudButton Variant="Variant.Filled" Color="Color.Default" Style="color:white;" OnClick="ApplyPromoCode" Disabled="promoApplied">Valider</MudButton>
						</div>
						@if (!string.IsNullOrEmpty(promoMessage))
						{
							<MudText Color="@promoMessageColor">@promoMessage</MudText>
						}

					</div>
					<div class="row">
						<p style="text-align: center; font-size: 16px; color: #ffffff; margin-top: 20px; text-wrap-mode: nowrap;">
							<MudIcon Icon="@Icons.Material.Filled.Send" Title="Favorite" />
							@Localize["DeliveryText"]
						</p>

					</div>
				</div>
				<div class="center-line"></div>

				<div class="row" style="place-self:center">
					<span class="payment-card-title">@Localize["PaymentMethods"]</span>
					<div class="row" style="    margin-bottom: 20px;">
						<MudForm Model="@subscriptionModel" OnValidSubmit="HandleValidSubmit">
							<MudTextField Label="@Localize["Email"]" Style="color: white;"
										  InputClass="custom-placeholder" @bind-Value="subscriptionModel.Email" Required="true" Error="@emailError" />
							<MudTextField Label="@Localize["ConfirmEmail"]" Style="color: white;"
										  InputClass="custom-placeholder" @bind-Value="subscriptionModel.ConfirmEmail" Required="true" Error="@confirmEmailError" />
						</MudForm>
					</div>
					<div style="text-align: center;">
						<button class="button checkout-sub" @onclick="Checkout" disabled="@IsCheckoutDisabled">
							@Localize["Checkout"]
						</button>
					</div>
				</div>
			</div>
		</div>
	</div>
	<MudDialog @bind-Visible="_visible" Options="_dialogOptions">
		<TitleContent>
			<MudText Typo="Typo.h6">
				<MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="mr-3" />
				@Localize["OrderReceivedNo"] : #@info.SubscriptionId
			</MudText>
		</TitleContent>

		<DialogContent>
			<MudText Typo="Typo.body1" Class="mb-2">
				@Localize["GreetingWithEmail"] @info.Email,
			</MudText>
			<MudText Typo="Typo.body1" Class="mb-2">
				@Localize["OrderReceived"] <b>@info.Plan</b>.
			</MudText>
			<MudText Typo="Typo.body1" Class="mb-2">
				@Localize["DeliveryTime"]
			</MudText>
			<MudText Typo="Typo.body1" Class="mb-2">
				@Localize["ContactSupport"] <b>@supportEmail</b>
			</MudText>
			<MudText Typo="Typo.body1" Class="mt-3">
				@Localize["ThankYou"]<br />
				@Localize["TeamSignature"]
			</MudText>
		</DialogContent>

		<DialogActions>
			<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CloseDialog" Class="px-10">
				Fermer
			</MudButton>
		</DialogActions>
	</MudDialog>

}
<style>
	.button {
		position: relative;
		background-color: #04AA6D;
		border: none;
		font-size: 28px;
		color: #FFFFFF;
		padding: 20px;
		width: 200px;
		text-align: center;
		-webkit-transition-duration: 0.4s; /* Safari */
		transition-duration: 0.4s;
		text-decoration: none;
		overflow: hidden;
		cursor: pointer;
	}

		.button:after {
			content: "";
			background: #90EE90;
			display: block;
			position: absolute;
			padding-top: 300%;
			padding-left: 350%;
			margin-left: -20px !important;
			margin-top: -120%;
			opacity: 0;
			transition: all 0.8s
		}

		.button:active:after {
			padding: 0;
			margin: 0;
			opacity: 1;
			transition: 0s
		}
</style>
@code {
	private bool _visible;
	private bool IsCheckoutDisabled =>
	string.IsNullOrWhiteSpace(subscriptionModel.Email) ||
	string.IsNullOrWhiteSpace(subscriptionModel.ConfirmEmail) ||
	!subscriptionModel.Email.Equals(subscriptionModel.ConfirmEmail, StringComparison.OrdinalIgnoreCase);

	private readonly DialogOptions _dialogOptions = new() { FullWidth = true };
	private readonly string supportEmail = "sva.records.o@gmail.com";
	private void OpenDialog()
	{
		Console.WriteLine("Dialog visible !");
		_visible = true;
		StateHasChanged();
	}
	private void Submit() => _visible = false;
	private SubscriptionRequest subscriptionModel = new SubscriptionRequest();
	private int selectedDuration = 12; // ou null si tu préfères
	private bool emailError => !string.IsNullOrEmpty(subscriptionModel.Email) && !new EmailAddressAttribute().IsValid(subscriptionModel.Email);
	private bool confirmEmailError => subscriptionModel.ConfirmEmail != subscriptionModel.Email;
	[Parameter]
	public string? paramBrandName { get; set; } //contient le nom du brand

	public string BrandName { get; set; } = string.Empty;
	public List<SubscriptionPlan>? Plans { get; set; } //Tous les types d'abonnements possible
	public SubscriptionPlan? SelectedPlan { get; set; }
	public Brand? SelectedBrand { get; set; }
	public List<string>? SubscriptionTypes { get; set; }
	public List<int>? Durations { get; set; }
	public string LabelPayment { get; set; } = string.Empty;

	private decimal Price = 0;

	private bool CanBuy => !string.IsNullOrEmpty(subscriptionModel.Email) &&
							subscriptionModel.Email == subscriptionModel.ConfirmEmail &&
							Price > 0 &&
							!string.IsNullOrEmpty(subscriptionModel.PaymentMethod);
	private bool showPopup = false;
	private SubscriptionInfo info;
	[Parameter][SupplyParameterFromQuery] public bool? canceled { get; set; }
	private string errorMessage;

	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine($"Chargement de la page pour: {paramBrandName}");
		CurrencyService.OnCurrencyChanged += OnCurrencyChanged;
		var uri = Nav.ToAbsoluteUri(Nav.Uri);
		var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
		var sessionId = query["session_id"];

		if (!string.IsNullOrEmpty(sessionId))
		{
			try
			{
				info = await Http.GetFromJsonAsync<SubscriptionInfo>($"api/payments/success?session_id={sessionId}");

				if (info is null || info.SubscriptionId == -1)
				{
					Console.WriteLine("Payment not found for : ", sessionId);
				}
				else
				{
					OpenDialog();
					// Supprimer le paramètre de l’URL sans recharger la page
					var cleanUrl = Nav.Uri.Split('?')[0];
					Nav.NavigateTo(cleanUrl, forceLoad: false);
				}
			}
			catch (Exception ex)
			{
				Console.WriteLine("Erreur : " + ex.Message);
			}
		}
		if (canceled == true)
		{
			// Affiche une alerte ou redirige
			errorMessage = "Le paiement a été annulé.";
		}
		try
		{
			if (!string.IsNullOrEmpty(paramBrandName))
			{
				SelectedBrand = await BrandService.GetByName(paramBrandName);
				if (SelectedBrand == null)
				{
					// Gestion de l'absence de la marque, par exemple, redirection ou affichage d'un message.
					Nav.NavigateTo("/notfound");

					return;
				}
				await LoadSubscriptionTypes();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Erreur dans l'initialisation : {ex.Message}");
		}
	}

	// protected override async Task OnAfterRenderAsync(bool firstRender)
	// {
	// 	if (firstRender)
	// 	{
	// 		_dotNetRef = DotNetObjectReference.Create(this);
	// 		await JS.InvokeVoidAsync("initPayPalButton", _dotNetRef);
	// 	}
	// }

	// private async Task OnSelectedChanged(string newValue)
	// s{
	// 	SelectedPlan = Plans.FirstOrDefault(a => a.SubscriptionType.Name == newValue && a.DurationMonths == SelectedPlan.DurationMonths);
	// 	// Fais ce que tu veux ici (appel API, changement d'état, etc.)
	// }
	private async Task LoadSubscriptionTypes()
	{
		try
		{
			if (SelectedBrand == null)
			{
				Console.WriteLine("LoadSubscriptionTypes : SelectedBrand is NULL");
				return;
			}
			BrandName = SelectedBrand.Name;
			Plans = (await PlanService.GetPlansByBrandIdAsync(SelectedBrand.Id)).ToList();
			SubscriptionTypes = Plans.Select(p => p.SubscriptionType.Name).Distinct().ToList();
			SelectedPlan = Plans.Where(a => a.BrandId == SelectedBrand.Id && a.DurationMonths == selectedDuration).OrderBy(a => a.Price).FirstOrDefault();
			Durations = Plans.Select(p => p.DurationMonths).Distinct().ToList();
			// Force le rendu de la page après la mise à jour de l'état
			// await InvokeAsync(() => StateHasChanged());

		}
		catch (Exception ex)
		{
			Console.WriteLine($"Erreur lors du chargement des types : {ex.Message}");
		}
	}
	private async void OnCurrencyChanged()
	{
		await ClearPromoCode(); // ou ClearPromoCode() si tu as une méthode
		await InvokeAsync(StateHasChanged);
	}
	private void CloseDialog()
	{
		_visible = false;
	}
	public void SelectPlan(int duration)
	{
		if (SelectedPlan == null || Plans == null)
		{
			Console.WriteLine("SelectPlan : SelectedPlan/Plans is NULL");
			return;
		}
		SelectedPlan = Plans.FirstOrDefault(a => a.DurationMonths == duration && SelectedPlan.SubscriptionTypeId == a.SubscriptionTypeId);
		selectedDuration = duration;
	}
	private decimal GetMonthlyPrice(int duration)
	{
		if (SelectedPlan == null || Plans == null)
		{
			Console.WriteLine("SelectPlan : SelectedPlan/Plans is NULL");
			return 0;
		}
		var plan = Plans.FirstOrDefault(p => p.DurationMonths == duration && p.SubscriptionTypeId == SelectedPlan.SubscriptionTypeId);
		return plan != null ? Math.Round(plan.Price / duration, 2) : 0;
	}
	private string? promoCode;
	private string? promoMessage;
	private Color promoMessageColor = Color.Default;
	private bool promoApplied = false;
	private decimal promoPourcentage = 0;

	private async Task ApplyPromoCode()
	{
		try
		{
			if (Plans is null || SelectedPlan is null)
			{
				Console.WriteLine("No selected plan/ No plans");
				throw new NullReferenceException("No selected plan/ No plans");
			}
			if (promoApplied)
			{
				promoMessage = Localize["PromoAlreadyApplied"];
				promoMessageColor = Color.Warning;
				return;
			}

			var result = await PromoService.ValidateCodeAsync(promoCode ?? "");

			if (result == null)
			{
				promoMessage = Localize["InvalidOrExpiredCode"];
				promoMessageColor = Color.Error;
			}
			else
			{
				promoMessage = Localize["PromoCodeApplied", result.Code, result.DiscountPercentage];
				promoMessageColor = Color.Success;
				foreach (var plan in Plans.Where(p => p.BrandId == SelectedPlan.BrandId))
				{
					plan.Price *= (1 - (result.DiscountPercentage / 100m));
				}
				promoApplied = true;
				promoPourcentage = result.DiscountPercentage;
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine("Exception ApplyPromoCode: " + ex.Message);
			return;
		}
	}
	private async Task ClearPromoCode()
	{
		try
		{
			if (Plans is null || SelectedPlan is null)
			{
				Console.WriteLine("No selected plan/ No plans");
				throw new NullReferenceException("No selected plan/ No plans");
			}
			if (!promoApplied)
			{
				return;
			}
			else
			{
				promoMessage = $"";
				promoMessageColor = Color.Info;
				foreach (var plan in Plans.Where(p => p.BrandId == SelectedPlan.BrandId))
				{
					plan.Price /= (1 - (promoPourcentage / 100m));
				}
				promoApplied = false;
				promoPourcentage = 0;
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine("Exception ClearPromoCode: " + ex.Message);
			return;
		}
	}
	private async Task ShowSuccess(string email)
	{
		var parameters = new DialogParameters
			{
				["Message"] = Localize["SuccessMessage", email]
			};

		await DialogService.ShowAsync<SuccessDialog>("Succès", parameters);
	}
	private async Task<string?> Checkout()
	{
		try
		{
			if (SelectedPlan is null)
			{
				Console.WriteLine("No selected plan");
				throw new NullReferenceException("No selected plan");
			}
			var culture = await JS.InvokeAsync<string>("blazorCulture.get");
			// await JS.InvokeVoidAsync("startStripeCheckout", SelectedPlan.Id, CurrencyService.SelectedCurrency.Code, subscriptionModel.Email, promoCode);
			await JS.InvokeVoidAsync("startStripeCheckout", SelectedPlan.Id, CurrencyService.SelectedCurrency.Code, subscriptionModel.Email, promoCode, culture);

			// var request = new OrderRequestCart
			// 	{
			// 		PlanId = SelectedPlan.Id,
			// 		CurrencyCode = CurrencyService.SelectedCurrency.Code,        // Exemple de devise
			// 		PromoCode = promoCode    // Code promo, ou null si pas de code
			// 	};

			// var response = await Http.PostAsJsonAsync("https://localhost:7237/api/payments/create-checkout-session", request);


			// if (response.IsSuccessStatusCode)
			// {
			// 	var result = await response.Content.ReadFromJsonAsync<CreateCheckoutResponse>();
			// 	if (result?.CheckoutUrl is not null)
			// 	{
			// 		Nav.NavigateTo(result.CheckoutUrl, forceLoad: true);
			// 	}
			// }
			// if (response.IsSuccessStatusCode)
			// {
			// 	var orderData = await response.Content.ReadFromJsonAsync<OrderResponse>();
			// 	subscriptionModel.OrderId = orderData?.Id;
			// 	return orderData?.Id;
			// }

			// var error = await response.Content.ReadAsStringAsync();
			// Console.WriteLine("Erreur CreateOrder: " + error);
			return null;
		}
		catch (Exception ex)
		{
			Console.WriteLine("Exception Checkout: " + ex.Message);
			return null;
		}
	}

	// [JSInvokable]
	// public async Task<string?> CreateOrder()
	// {
	// 	try
	// 	{
	// 		var request = new OrderRequestCart
	// 			{
	// 				PlanId = SelectedPlan.Id,
	// 				CurrencyCode = CurrencyService.SelectedCurrency.Code,        // Exemple de devise
	// 				PromoCode = promoCode    // Code promo, ou null si pas de code
	// 			};

	// 		var response = await Http.PostAsJsonAsync("https://localhost:7237/api/orders", request);

	// 		if (response.IsSuccessStatusCode)
	// 		{
	// 			var orderData = await response.Content.ReadFromJsonAsync<OrderResponse>();
	// 			subscriptionModel.OrderId = orderData?.Id;
	// 			return orderData?.Id;
	// 		}

	// 		var error = await response.Content.ReadAsStringAsync();
	// 		Console.WriteLine("Erreur CreateOrder: " + error);
	// 		return null;
	// 	}
	// 	catch (Exception ex)
	// 	{
	// 		Console.WriteLine("Exception CreateOrder: " + ex.Message);
	// 		return null;
	// 	}
	// }

	// [JSInvokable]
	// public async Task<bool> CaptureOrder(string orderId)
	// {
	// 	try
	// 	{
	// 		var response = await Http.PostAsync($"https://localhost:7237/api/orders/{orderId}/capture", null);
	// 		Console.WriteLine("response :" + response);
	// 		var orderData = await response.Content.ReadFromJsonAsync<CaptureResponse>();
	// 		Console.WriteLine("orderdata :" + orderData);

	// 		if (orderData?.Details?.Any() == true)
	// 		{
	// 			Console.WriteLine("Capture error: " + orderData.Details[0].Description);
	// 			return false;
	// 		}

	// 		var capture = orderData?.PurchaseUnits?[0]?.Payments?.Captures?.FirstOrDefault();
	// 		if (capture != null)
	// 		{
	// 			Console.WriteLine($"Transaction {capture.Status}: {capture.Id}");
	// 			if (SelectedPlan == null)
	// 			{
	// 				Console.WriteLine("CaptureOrder : SelectedPlan is NULL");
	// 				return false;
	// 			}
	// 			subscriptionModel.SubscriptionPlanId = SelectedPlan.Id;
	// 			subscriptionModel.PaymentMethod = "Paypal";
	// 			purchasedId = await SubscriptionPlanService.PurchaseSubscriptionAsync(subscriptionModel) ?? -1;
	// 			if (purchasedId == -1)
	// 				return false;
	// 			OpenDialog();
	// 			return true;
	// 		}

	// 		return false;
	// 	}
	// 	catch (Exception ex)
	// 	{
	// 		Console.WriteLine("Exception CaptureOrder: " + ex.Message);
	// 		return false;
	// 	}
	// }
	public class SubscriptionInfo
	{
		public int SubscriptionId { get; set; }
		public string Plan { get; set; }
		public string Email { get; set; }
		public decimal Price { get; set; }
	}
	public class OrderRequestCart
	{
		public int PlanId { get; set; }
		[Required]
		public string CurrencyCode { get; set; } = string.Empty;
		public string? PromoCode { get; set; }
		[Required]
		[EmailAddress]
		public string Email { get; set; } = string.Empty;

		[Required]
		[EmailAddress]
		[Compare("Email", ErrorMessageResourceType = typeof(App), ErrorMessageResourceName = "Compare_ConfirmEmail")]
		public string ConfirmEmail { get; set; } = string.Empty;
	}
	public class CreateCheckoutResponse
	{
		public required string CheckoutUrl { get; set; } = string.Empty;
	}
	// public class OrderResponse
	// {
	// 	public string? Id { get; set; }
	// 	public string? DebugId { get; set; }
	// 	public List<ErrorDetail>? Details { get; set; }
	// }

	// public class CaptureResponse
	// {
	// 	public string? DebugId { get; set; }
	// 	public List<ErrorDetail>? Details { get; set; }
	// 	public List<PurchaseUnit>? PurchaseUnits { get; set; }
	// }

	// public class ErrorDetail
	// {
	// 	public string? Issue { get; set; }
	// 	public string? Description { get; set; }
	// }

	// public class PurchaseUnit
	// {
	// 	public PaymentInfo? Payments { get; set; }
	// }

	// public class PaymentInfo
	// {
	// 	public List<Capture>? Captures { get; set; }
	// }

	// public class Capture
	// {
	// 	public string? Id { get; set; }
	// 	public object? Status { get; set; }
	// }
	// private void Refresh()
	// {
	// 	InvokeAsync(StateHasChanged);
	// }

	public void Dispose()
	{
		CurrencyService.OnCurrencyChanged -= OnCurrencyChanged;
	}
}